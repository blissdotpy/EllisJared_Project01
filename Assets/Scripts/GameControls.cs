//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""GameWideInputs"",
            ""id"": ""5d85718b-b26e-4b72-8b42-d19090ea5373"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""35d29725-dc62-40b6-bd7d-d5e25b70f4fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""1b57b851-5b01-47d8-9ea7-ef1e409c10ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5aa5195d-6478-44d7-b3a5-8d1b5745f0a9"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4572bac2-b4fe-4f0b-b1fd-5dc5c78a5767"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameWideInputs
        m_GameWideInputs = asset.FindActionMap("GameWideInputs", throwIfNotFound: true);
        m_GameWideInputs_Restart = m_GameWideInputs.FindAction("Restart", throwIfNotFound: true);
        m_GameWideInputs_Exit = m_GameWideInputs.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameWideInputs
    private readonly InputActionMap m_GameWideInputs;
    private IGameWideInputsActions m_GameWideInputsActionsCallbackInterface;
    private readonly InputAction m_GameWideInputs_Restart;
    private readonly InputAction m_GameWideInputs_Exit;
    public struct GameWideInputsActions
    {
        private @GameControls m_Wrapper;
        public GameWideInputsActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_GameWideInputs_Restart;
        public InputAction @Exit => m_Wrapper.m_GameWideInputs_Exit;
        public InputActionMap Get() { return m_Wrapper.m_GameWideInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameWideInputsActions set) { return set.Get(); }
        public void SetCallbacks(IGameWideInputsActions instance)
        {
            if (m_Wrapper.m_GameWideInputsActionsCallbackInterface != null)
            {
                @Restart.started -= m_Wrapper.m_GameWideInputsActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_GameWideInputsActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_GameWideInputsActionsCallbackInterface.OnRestart;
                @Exit.started -= m_Wrapper.m_GameWideInputsActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_GameWideInputsActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_GameWideInputsActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_GameWideInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public GameWideInputsActions @GameWideInputs => new GameWideInputsActions(this);
    public interface IGameWideInputsActions
    {
        void OnRestart(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
